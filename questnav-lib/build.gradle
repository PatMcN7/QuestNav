plugins {
    id 'java'
    id 'cpp'
    id 'maven-publish'
    id 'edu.wpi.first.GradleRIO' version '2025.3.2'
    id 'com.diffplug.spotless' version '6.20.0'
}

// Version and build configuration
ext {
    baseVersion = project.findProperty('questnavVersion')
    releaseType = project.findProperty('releaseType')
    frcYear = project.findProperty('frcYear')
    wpilibVersion = project.findProperty('wpilibVersion')

    // Construct full version from base + release type
    questnavVersion = releaseType == 'release' ? baseVersion : "${baseVersion}-${releaseType}"

    // Vendor dependency configuration
    vendorUuid = project.findProperty('vendorUuid')
    mavenGroupId = project.findProperty('mavenGroupId')
    javaArtifactId = project.findProperty('javaArtifactId')
    cppArtifactId = project.findProperty('cppArtifactId')

    // Repository configuration
    mavenRepoUrl = project.findProperty('mavenRepoUrl') ?: 'https://maven.questnav.gg/'
    isSnapshot = releaseType in ['dev', 'snapshot'] || questnavVersion.contains('-SNAPSHOT')
}

dependencies {
    // Java
    implementation "edu.wpi.first.wpilibj:wpilibj-java:${wpilibVersion}"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:${wpilibVersion}"
    implementation "edu.wpi.first.wpimath:wpimath-java:${wpilibVersion}"
    implementation "edu.wpi.first.ntcore:ntcore-java:${wpilibVersion}"
    implementation "edu.wpi.first.wpiunits:wpiunits-java:${wpilibVersion}"
    implementation "com.google.protobuf:protobuf-java:4.31.1"
    implementation "us.hebi.quickbuf:quickbuf-runtime:1.4"

    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// C++ configuration
model {
    components {
        "questnavlibCpp"(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/cpp'
                        include '**/*.cpp', '**/*.cc'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                        include "**/*.h"
                    }
                }
            }

            nativeUtils.useRequiredLibrary(it, "wpilib_shared")
            nativeUtils.useRequiredLibrary(it, "wpiutil_shared")
            nativeUtils.useRequiredLibrary(it, "wpimath_shared")
            nativeUtils.useRequiredLibrary(it, "ntcore_shared")
        }
    }
}


// Java configuration
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "WPILib"
        url = "https://frcmaven.wpi.edu/artifactory/release/"
    }
    if (project.hasProperty('mavenRepoUrl')) {
        maven {
            name = "QuestNavRepo"
            url = mavenRepoUrl + (isSnapshot ? "/snapshots" : "/releases")
        }
    }
}

test {
    useJUnitPlatform()
}

javadoc {
    exclude '**/generated/**'
}

// Generate vendor JSON
def vendorJsonInput = file("src/generate/questnavlib.json.in")
def vendorJsonOutput = file("$buildDir/generated/vendordeps/questnavlib.json")

task generateVendorJson() {
    description = "Generates the vendor JSON file"
    group = "QuestNavLib"

    inputs.file vendorJsonInput
    inputs.property("baseVersion", baseVersion)
    inputs.property("releaseType", releaseType)
    inputs.property("version", questnavVersion)
    inputs.property("frcYear", frcYear)
    outputs.file vendorJsonOutput

    doLast {
        println "Generating vendor JSON ${questnavVersion} (${baseVersion} + ${releaseType}) to ${vendorJsonOutput}"

        vendorJsonOutput.parentFile.mkdirs()

        // Determine repository URL based on release type
        def repoType = isSnapshot ? "snapshots" : "releases"
        def jsonUrl = "https://maven.questnav.gg/${repoType}/gg/questnav/questnavlib-json/${questnavVersion}/questnavlib-json-${questnavVersion}.json"

        def content = vendorJsonInput.text
                .replace('${questnav_version}', questnavVersion)
                .replace('${frc_year}', frcYear)
                .replace('${questnav_uuid}', vendorUuid)
                .replace('${json_url}', jsonUrl)

        vendorJsonOutput.text = content
    }

    outputs.upToDateWhen { false }
}

// Create publishable artifact
def vendorJsonArtifact = artifacts.add('archives', vendorJsonOutput) {
    type = 'json'
    builtBy generateVendorJson
}

// Publishing configuration
publishing {
    publications {
        questnavlibJava(MavenPublication) {
            groupId = mavenGroupId
            artifactId = javaArtifactId
            version = questnavVersion

            from components.java

            pom {
                name = 'QuestNavLib Java'
                description = 'QuestNav vendor dependency library (Java)'
                url = 'https://github.com/questnav/questnav/tree/main/questnav-lib'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/questnav/questnav.git'
                    developerConnection = 'scm:git:ssh://github.com/questnav/questnav.git'
                    url = 'https://github.com/questnav/questnav/tree/main/questnav-lib'
                }
            }
        }

        questnavlibCpp(MavenPublication) {
            groupId = mavenGroupId
            artifactId = cppArtifactId
            version = questnavVersion

            from components.java

            pom {
                name = 'QuestNavLib C++'
                description = 'QuestNav vendor dependency library (C++)'
                url = 'https://github.com/questnav/questnav/tree/main/questnav-lib'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/questnav/questnav.git'
                    developerConnection = 'scm:git:ssh://github.com/questnav/questnav.git'
                    url = 'https://github.com/questnav/questnav/tree/main/questnav-lib'
                }
            }
        }

        questnavlibJson(MavenPublication) {
            groupId = mavenGroupId
            artifactId = 'questnavlib-json'
            version = questnavVersion

            artifact vendorJsonArtifact

            pom {
                name = 'QuestNavLib Vendor JSON'
                description = 'QuestNav vendor dependency JSON file'
                url = 'https://github.com/questnav/questnav/tree/main/questnav-lib'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/questnav/questnav.git'
                    developerConnection = 'scm:git:ssh://github.com/questnav/questnav.git'
                    url = 'https://github.com/questnav/questnav/tree/main/questnav-lib'
                }
            }
        }
    }

    repositories {
        if (project.hasProperty('mavenRepoUrl')) {
            maven {
                name = "QuestNavRepo"
                url = mavenRepoUrl + (isSnapshot ? "/snapshots" : "/releases")

                // Add credentials if provided
                if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
                    credentials {
                        username = project.findProperty('mavenUsername')
                        password = project.findProperty('mavenPassword')
                    }
                }
            }
        }

        // For local testing
        mavenLocal()
    }
}

// Build dependencies
build.dependsOn generateVendorJson

// Task to copy vendor JSON to local output for testing
task copyVendorJsonLocal(type: Copy) {
    description = "Copy vendor JSON to local output directory"
    group = "QuestNavLib"

    from vendorJsonOutput
    into "$buildDir/outputs/vendordeps/"

    dependsOn generateVendorJson
}

// Task to print build info
task buildInfo {
    description = "Print build information"
    group = "QuestNavLib"

    doLast {
        println "QuestNavLib Build Information:"
        println "  Base Version: ${baseVersion}"
        println "  Release Type: ${releaseType}"
        println "  Full Version: ${questnavVersion}"
        println "  FRC Year: ${frcYear}"
        println "  WPILib Version: ${wpilibVersion}"
        println "  Group ID: ${mavenGroupId}"
        println "  Java Artifact ID: ${javaArtifactId}"
        println "  C++ Artifact ID: ${cppArtifactId}"
        println "  UUID: ${vendorUuid}"
        println "  Is Snapshot: ${isSnapshot}"
        println "  Repository Type: ${isSnapshot ? 'snapshots' : 'release'}"
        if (project.hasProperty('mavenRepoUrl')) {
            println "  Repository: ${mavenRepoUrl}"
        }
        def jsonUrl = "https://maven.questnav.gg/${isSnapshot ? 'snapshots' : 'release'}/gg/questnav/questnavlib-json/${questnavVersion}/questnavlib-json-${questnavVersion}.json"
        println "  Vendor JSON URL: ${jsonUrl}"
    }
}

// Gradle wrapper task
wrapper {
    gradleVersion = '8.11'
}

// Clean task to remove generated files
clean {
    delete "$buildDir/generated"
    delete "$buildDir/outputs"
}

spotless {
    java {
        target fileTree(".") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**", "**/generated/**"
        }
        toggleOffOn()

        licenseHeader '''
/*
 * QUESTNAV
   https://github.com/QuestNav
 * Copyright (C) $YEAR QuestNav
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License as published.
 */
'''
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    cpp {
        target fileTree(".") {
            include "src/main/native/**/*.cpp", "src/main/native/**/*.h"
            exclude "**/build/**", "**/build-*/**", "**/generated/**"
        }
        licenseHeader '''/*
 * QUESTNAV
   https://github.com/QuestNav
 * Copyright (C) $YEAR QuestNav
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License as published.
 */
''', '#pragma once|#include'
        clangFormat('20.1.7').style('Google')
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**", "**/generated/**"
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target fileTree(".") {
            include "**/*.json"
            exclude "**/build/**", "**/build-*/**", "**/generated/**"
        }
        gson().indentWithSpaces(4)
    }
    format "misc", {
        target fileTree(".") {
            include "**/*.md", "**/.gitignore"
            exclude "**/build/**", "**/build-*/**", "**/generated/**"
        }
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}
